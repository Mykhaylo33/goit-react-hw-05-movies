{"version":3,"file":"static/js/365.60b4e6f2.chunk.js","mappings":"ySAAMA,EAAW,8BACXC,EAAU,mCAEVC,EAAc,mCAAG,WAAOC,GAAP,oEAChBA,EAASC,GADO,sBAEb,IAAIC,MAAM,mCAFG,gCAIdF,EAASG,QAJK,2CAAH,sDAOPC,EAAiB,mCAAG,oGACRC,MAAM,GAAD,OACvBR,EADuB,sCACeC,EADf,oBADG,cACzBE,EADyB,yBAIxBD,EAAeC,IAJS,2CAAH,qDAOjBM,EAAY,mCAAG,WAAOC,GAAP,uFACHF,MAAM,GAAD,OAAIR,EAAJ,mBAAuBU,EAAvB,oBAAqCT,IADvC,cACpBE,EADoB,yBAEnBD,EAAeC,IAFI,2CAAH,sDAKZQ,EAAe,mCAAG,WAAOD,GAAP,uFACNF,MAAM,GAAD,OACvBR,EADuB,mBACJU,EADI,4BACkBT,IAFjB,cACvBE,EADuB,yBAItBD,EAAeC,IAJO,2CAAH,sDAOfS,EAAe,mCAAG,WAAOF,GAAP,uFACNF,MAAM,GAAD,OACvBR,EADuB,mBACJU,EADI,4BACkBT,IAFjB,cACvBE,EADuB,yBAItBD,EAAeC,IAJO,2CAAH,sDAOfU,EAAiB,mCAAG,WAAOC,GAAP,uFACRN,MAAM,GAAD,OACvBR,EADuB,kCACWC,EADX,iCAC2Ca,IAFxC,cACzBX,EADyB,yBAIxBD,EAAeC,IAJS,2CAAH,qD,oLCjCjBY,GAAYC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,0GAQTE,EAASF,EAAAA,EAAAA,GAAH,8E,6BCTNG,EAAaH,EAAAA,EAAAA,KAAH,8KAUVI,EAAmBJ,EAAAA,EAAAA,OAAH,sWAkBhBK,EAAkBL,EAAAA,EAAAA,MAAH,ob,SCnBb,SAASM,IAEtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAqBC,GAArB,WACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAkBA,OACE,UAACR,EAAD,CAAYS,SAjBO,SAAAC,GACnBA,EAAMC,iBAEqB,KAAvBJ,EAAYK,QAKhBP,EAAgB,CAAEQ,MAAON,IACzBC,EAAe,KALbM,IAAAA,OAAAA,QAAwB,oCAM3B,EAOC,WACE,SAACZ,EAAD,CACEa,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOZ,EACPa,SAZe,SAAAV,GACnBF,EAAeE,EAAMW,OAAOF,MAC7B,EAWKG,KAAK,iBAEP,SAACrB,EAAD,CAAkBc,KAAK,SAAvB,UACE,SAAC,MAAD,QAIP,CCzCc,SAASQ,IACtB,OAA4BjB,EAAAA,EAAAA,UAAS,IAArC,eAAOkB,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAuBvB,EAAAA,EAAAA,MACjBwB,GADN,eAC+BC,IAAI,SAkBnC,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,8GAEGrC,EAAAA,EAAAA,IAAkBkC,GAFrB,OAEVI,EAFU,OAGhBP,EAAUO,EAAKC,SACa,IAAxBD,EAAKC,QAAQC,QACfpB,IAAAA,OAAAA,QAAwB,4BALV,yGAAH,qDAUbc,GACFG,GAEH,GAAE,CAACH,KAGF,iCACE,SAACzB,EAAD,KACA,wBACGqB,EAAOW,KAAI,gBAAGC,EAAH,EAAGA,MAAOd,EAAV,EAAUA,KAAM/B,EAAhB,EAAgBA,GAAhB,OACV,SAACQ,EAAD,WACE,SAACH,EAAD,CAAWyC,GAAE,kBAAa9C,GAAM+C,MAAO,CAAEC,KAAMb,GAA/C,SACGJ,GAAQc,KAFA7C,EADH,QAUnB,C","sources":["api/index.js","components/Pages/Movies/Movies.styled.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","components/Pages/Movies/Movies.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = 'f68a95841909bbb245d2b540e82c3a85';\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n  return response.json();\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await fetch(\n    `${BASE_URL}3/trending/all/day?api_key=${API_KEY}&language=en-US`\n  );\n  return handleResponse(response);\n};\n\nexport const getMovieById = async (id) => {\n  const response = await fetch(`${BASE_URL}3/movie/${id}?api_key=${API_KEY}`);\n  return handleResponse(response);\n};\n\nexport const getMovieCredits = async (id) => {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n  return handleResponse(response);\n};\n\nexport const getMovieReviews = async (id) => {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return handleResponse(response);\n};\n\nexport const getMoviesBySearch = async (searchQuery) => {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}`\n  );\n  return handleResponse(response);\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n  &:hover {\n    color: #3eac9c;\n  }\n`;\n\nexport const PageLi = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 6px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 400px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 2px solid black;\n  border-left: none;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 0.6;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: 2px solid black;\n  border-right: none;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  outline: none;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 4px;\n  padding-right: 4px;\n  &:hover {\n    opacity: 0.6;\n  }\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nimport {\n  SearchForm,\n  SearchFormInput,\n  SearchFormButton,\n} from './SearchBar.styled';\n\nexport default function SearchBar() {\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchInput, setSearchInput] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (searchInput.trim() === '') {\n      Notiflix.Notify.warning('Search query should not be empty!');\n      return;\n    }\n\n    setSearchParams({ query: searchInput });\n    setSearchInput('');\n  };\n\n  const handleChange = event => {\n    setSearchInput(event.target.value);\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <SearchFormInput\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search Movies\"\n        value={searchInput}\n        onChange={handleChange}\n        name=\"searchInput\"\n      />\n      <SearchFormButton type=\"submit\">\n        <FaSearch />\n      </SearchFormButton>\n    </SearchForm>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { getMoviesBySearch } from 'api';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MovieLink, PageLi } from './Movies.styled';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport Notiflix from 'notiflix';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const movieName = searchParams.get('query');\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const data = await getMoviesBySearch(movieName);\n        setMovies(data.results);\n        if (data.results.length === 0) {\n          Notiflix.Notify.warning('There are no films found');\n        }\n      } catch (error) {}\n    };\n\n    if (movieName) {\n      fetchMovies();\n    }\n  }, [movieName]);\n\n  return (\n    <>\n      <SearchBar />\n      <ul>\n        {movies.map(({ title, name, id }) => (\n          <PageLi key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n              {name || title}\n            </MovieLink>\n          </PageLi>\n        ))}\n      </ul>\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","handleResponse","response","ok","Error","json","getTrendingMovies","fetch","getMovieById","id","getMovieCredits","getMovieReviews","getMoviesBySearch","searchQuery","MovieLink","styled","Link","PageLi","SearchForm","SearchFormButton","SearchFormInput","SearchBar","useSearchParams","setSearchParams","useState","searchInput","setSearchInput","onSubmit","event","preventDefault","trim","query","Notiflix","type","autoComplete","autoFocus","placeholder","value","onChange","target","name","Movies","movies","setMovies","location","useLocation","movieName","get","useEffect","fetchMovies","data","results","length","map","title","to","state","from"],"sourceRoot":""}